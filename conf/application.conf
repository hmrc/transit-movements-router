# Copyright 2023 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "backend.conf"

# This is the main configuration file for the application.
# ~~~~~

appName = transit-movements-router

# An ApplicationLoader that uses Guice to bootstrap the application.
play.application.loader = "uk.gov.hmrc.play.bootstrap.ApplicationLoader"

# Primary entry point for all HTTP requests on Play applications
play.http.requestHandler = "uk.gov.hmrc.play.bootstrap.http.RequestHandler"

# Provides an implementation of AuditConnector. Use `uk.gov.hmrc.play.audit.AuditModule` or create your own.
# An audit connector must be provided.
play.modules.enabled += "uk.gov.hmrc.play.audit.AuditModule"

# Provides an implementation of MetricsFilter. Use `uk.gov.hmrc.play.graphite.GraphiteMetricsModule` or create your own.
# A metric filter must be provided
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule"

# Provides an implementation and configures all filters required by a Platform frontend microservice.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.backend.BackendModule"

# Default http client
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule"

# Http client with support for streaming
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientV2Module"

# Json error handler
play.http.errorHandler = "uk.gov.hmrc.play.bootstrap.backend.http.JsonErrorHandler"

# Play Modules
play.modules.enabled += "uk.gov.hmrc.transitmovementsrouter.config.Module"

<<<<<<< HEAD
play.modules.enabled += "uk.gov.hmrc.objectstore.client.play.modules.ObjectStoreModule"
=======
# Provides access to the Object Store
play.modules.enabled += "uk.gov.hmrc.objectstore.client.play.modules.ObjectStoreModule"


>>>>>>> main
# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes

# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule.

controllers {
  # 300 is the default, you may need to change this according to your needs
  confidenceLevel = 300

}

# Metrics plugin settings - graphite reporting is configured on a per env basis
metrics {
  name = ${appName}
  rateUnit = SECONDS
  durationUnit = SECONDS
  showSamples = true
  jvm = true
  enabled = true
}

# Authentication for incoming requests from EIS
incomingRequestAuth {
  enabled = false
  acceptedTokens = []
}

# Microservice specific config

auditing {
  enabled = false
  traceRequests = true
  consumer {
    baseUri {
      host = localhost
      port = 8100
    }
  }
}


microservice {
  metrics {
    graphite {
      host = graphite
      port = 2003
      prefix = play.${appName}.
      enabled = false
    }
  }

  services {
    auth {
      host = localhost
      port = 8500
    }

  object-store {
      host = localhost
      port = 8464
      sdes-host = "https://hsopriv.hmrc.gov.uk/object-store/object"
    }

    eis {
      gb {
        protocol = http
        host = localhost
        port = 9476
        uri = "/transit-movements-eis-stub/movements/messages"
        headers.bearerToken = "bearertoken"
        circuit-breaker {
          max-failures = 5
          call-timeout = 30 seconds
          reset-timeout = 1 second
          max-reset-timeout = 5 minutes
          exponential-backoff-factor = 2.0
          random-factor = 0.2
        }
        retry {
          max-retries = 3
          delay-between-retries = 1 second
          timeout = 20 seconds
        }
      }
      xi {
        protocol = http
        host = localhost
        port = 9476
        uri = "/transit-movements-eis-stub/movements/messages"
        headers.bearerToken = "bearertoken"
        circuit-breaker {
          max-failures = 5
          call-timeout = 30 seconds
          reset-timeout = 1 second
          max-reset-timeout = 5 minutes
          exponential-backoff-factor = 2.0
          random-factor = 0.2
        }
        retry {
          max-retries = 3
          delay-between-retries = 1 second
          timeout = 20 seconds
        }
      }
    }

    transit-movements {
      protocol = "http"
      host = "localhost"
      port = 9520
    }

    transit-movements-push-notifications {
      protocol = "http"
      host = "localhost"
      port = 9508
      enabled = true
    }
  }
}

messageSizeLimit = 500000
object-store.default-retention-period = "7-years"
internal-auth.token = "1234"

